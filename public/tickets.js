const isDev = true; // –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ true –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏; –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å false
const log = (...args) => isDev && console.log(...args);
const logError = (...args) => console.error(...args);

document.addEventListener("DOMContentLoaded", async () => {
  const ticketsList = document.getElementById("ticketsList");

  // –ü–æ–ª—É—á–µ–Ω–∏–µ userId
  const getUserId = () => {
    let userId;
    if (window.Telegram?.WebApp?.initDataUnsafe?.user?.id) {
      userId = window.Telegram.WebApp.initDataUnsafe.user.id.toString();
      log("–ü–æ–ª—É—á–µ–Ω userId –∏–∑ Telegram Web App", userId);
      localStorage.setItem("userId", userId);
      return userId;
    }
    userId = localStorage.getItem("userId");
    if (!userId) {
      userId = `user_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;
      localStorage.setItem("userId", userId);
    }
    log("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è userId", userId);
    return userId;
  };

  // Fetch —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
  const fetchWithRetry = async (url, options, retries = 4, delay = 3000) => {
    for (let i = 0; i < retries; i++) {
      try {
        log(`–ó–∞–ø—Ä–æ—Å ${url}, –ø–æ–ø—ã—Ç–∫–∞ ${i + 1}/${retries}`);
        const response = await fetch(url, {
          ...options,
          signal: AbortSignal.timeout(90000),
          keepalive: true,
          cache: "no-cache",
        });
        log(`–ó–∞–ø—Ä–æ—Å ${url} —É—Å–ø–µ—à–µ–Ω`, { status: response.status });
        return response;
      } catch (error) {
        logError(`–ü–æ–ø—ã—Ç–∫–∞ ${i + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è ${url}`, error.message);
        if (i === retries - 1) throw error;
        await new Promise((resolve) => setTimeout(resolve, delay));
      }
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤
  const fetchTickets = async () => {
    const userId = getUserId();
    try {
      log("–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤ –∏–∑ /api/tickets", { userId });
      const response = await fetchWithRetry(`/api/tickets/${userId}`, {
        method: "GET",
        headers: { "Content-Type": "application/json" },
        cache: "no-cache",
      });
      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤: ${response.status}`);
      }
      const tickets = await response.json();
      log("–ë–∏–ª–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã", { count: tickets.length });
      renderTickets(tickets);
    } catch (error) {
      logError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–ª–µ—Ç–æ–≤", error.message);
      ticketsList.innerHTML =
        "<p>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–≤–∏—Ç–∫—ñ–≤: " + error.message + "</p>";
      ticketsList.querySelector(".spinner")?.remove();
      window.showToast("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–≤–∏—Ç–∫—ñ–≤: " + error.message);
    }
  };

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –±–∏–ª–µ—Ç–æ–≤
  const renderTickets = (tickets) => {
    log("–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –±–∏–ª–µ—Ç–æ–≤", { count: tickets.length });
    ticketsList.innerHTML = "";
    ticketsList.querySelector(".spinner")?.remove();
    if (!tickets || !Array.isArray(tickets) || tickets.length === 0) {
      ticketsList.innerHTML = "<p>–ö–≤–∏—Ç–∫—ñ–≤ –ø–æ–∫–∏ –Ω–µ–º–∞—î</p>";
      return;
    }
    tickets.forEach((ticket) => {
      log("–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –±–∏–ª–µ—Ç–∞", { id: ticket.id, ticketId: ticket.ticketId });
      const ticketCard = document.createElement("div");
      ticketCard.className = "ticket-card";
      ticketCard.innerHTML = `
        <h3>${ticket.eventName || "–ë–µ–∑ –Ω–∞–∑–≤–∏"}</h3>
        <p><strong>üéüÔ∏è –ö–æ–¥ –∫–≤–∏—Ç–∫–∞:</strong> ${ticket.ticketId || "–ù–µ–º–∞—î –∫–æ–¥—É"}</p>
        <p><strong>üìÖ –î–∞—Ç–∞:</strong> ${ticket.eventDate || "–ù–µ–º–∞—î –¥–∞—Ç–∏"}</p>
        <p><strong>üìç –ú—ñ—Å—Ü–µ:</strong> ${ticket.eventPlace || "–ù–µ–º–∞—î –º—ñ—Å—Ü—è"}</p>
        <p><strong>üí∏ –¶—ñ–Ω–∞:</strong> ${ticket.finalPrice ? ticket.finalPrice + " UAH" : "–ù–µ–º–∞—î —Ü—ñ–Ω–∏"}</p>
        <p><strong>üí≥ –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏:</strong> ${ticket.paymentMethod || "–ù–µ–º–∞—î –º–µ—Ç–æ–¥—É"}</p>
        <div class="ticket-actions">
          <button class="download-ticket" data-ticket-id="${ticket.ticketId}"><i class="fas fa-download"></i> –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF</button>
        </div>
      `;
      ticketCard
        .querySelector(".download-ticket")
        .addEventListener("click", () => generateTicket(ticket));
      ticketsList.appendChild(ticketCard);
    });
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–±–∏–ª–µ—Ç–∞
  const generateTicket = async (ticket) => {
    try {
      const { jsPDF } = window.jspdf;
      const doc = new jsPDF();
      doc.setFontSize(16);
      doc.text("TP TicketsPartners", 20, 20);
      doc.setFontSize(12);
      doc.text(`–ö–≤–∏—Ç–æ–∫: ${ticket.ticketId || "–ù–µ–º–∞—î –∫–æ–¥—É"}`, 20, 30);
      doc.text(`–ó–∞—Ö—ñ–¥: ${ticket.eventName || "–ë–µ–∑ –Ω–∞–∑–≤–∏"}`, 20, 40);
      doc.text(`–î–∞—Ç–∞: ${ticket.eventDate || "–ù–µ–º–∞—î –¥–∞—Ç–∏"}`, 20, 50);
      doc.text(`–ú—ñ—Å—Ü–µ: ${ticket.eventPlace || "–ù–µ–º–∞—î –º—ñ—Å—Ü—è"}`, 20, 60);
      doc.text(
        `–¶—ñ–Ω–∞: ${ticket.finalPrice ? ticket.finalPrice + " UAH" : "–ù–µ–º–∞—î —Ü—ñ–Ω–∏"}`,
        20,
        70,
      );
      if (ticket.imageUrl) {
        try {
          const imgResponse = await fetch(ticket.imageUrl);
          const imgBlob = await imgResponse.blob();
          const imgUrl = URL.createObjectURL(imgBlob);
          doc.addImage(imgUrl, "PNG", 20, 80, 50, 50);
          URL.revokeObjectURL(imgUrl);
        } catch (imgError) {
          logError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è PDF", imgError.message);
          doc.text("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", 20, 80);
        }
      } else {
        doc.text("–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î", 20, 80);
      }
      doc.save(`ticket_${ticket.ticketId}.pdf`);
    } catch (error) {
      logError("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–ª–µ—Ç–∞", error.message);
      window.showToast("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF: " + error.message);
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
  if (window.Telegram?.WebApp) {
    window.Telegram.WebApp.ready();
    window.Telegram.WebApp.expand();
    log("Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
  } else {
    logError("Telegram Web App –Ω–µ –Ω–∞–π–¥–µ–Ω");
    window.showToast("–ó–∞–ø—É—Å—Ç—ñ—Ç—å –¥–æ–¥–∞—Ç–æ–∫ —á–µ—Ä–µ–∑ Telegram");
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  fetchTickets();
});
